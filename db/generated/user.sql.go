// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  id, 
  first_name,
  last_name,
  username,
  age,
  height,
  weight,
  gender,
  exercise_level,
  aim,
  status,
  created_at,
  created_by,
  updated_at,
  updated_by
  ) 
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
)
`

type CreateUserParams struct {
	ID            uuid.UUID  `json:"id"`
	FirstName     *string    `json:"first_name"`
	LastName      *string    `json:"last_name"`
	Username      *string    `json:"username"`
	Age           *int32     `json:"age"`
	Height        *int32     `json:"height"`
	Weight        *int32     `json:"weight"`
	Gender        *string    `json:"gender"`
	ExerciseLevel *string    `json:"exercise_level"`
	Aim           *string    `json:"aim"`
	Status        string     `json:"status"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *uuid.UUID `json:"created_by"`
	UpdatedAt     time.Time  `json:"updated_at"`
	UpdatedBy     *uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Age,
		arg.Height,
		arg.Weight,
		arg.Gender,
		arg.ExerciseLevel,
		arg.Aim,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET
  status = 'deleted',
  deleted_at = NOW(),
  deleted_by = $2
WHERE id = $1
`

type DeleteUserParams struct {
	ID        uuid.UUID  `json:"id"`
	DeletedBy *uuid.UUID `json:"deleted_by"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.ID, arg.DeletedBy)
	return err
}

const getAllUser = `-- name: GetAllUser :one
SELECT id, first_name, last_name, username, age, height, weight, gender, exercise_level, aim, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM users 
WHERE status != 'deleted'
`

func (q *Queries) GetAllUser(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, getAllUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Gender,
		&i.ExerciseLevel,
		&i.Aim,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, username, age, height, weight, gender, exercise_level, aim, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM users
WHERE status != 'deleted'
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.Age,
			&i.Height,
			&i.Weight,
			&i.Gender,
			&i.ExerciseLevel,
			&i.Aim,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByAccountId = `-- name: GetUserByAccountId :one
SELECT users.id, users.first_name, users.last_name, users.username, users.age, users.height, users.weight, users.gender, users.exercise_level, users.aim, users.status, users.created_at, users.created_by, users.updated_at, users.updated_by, users.deleted_at, users.deleted_by
FROM users
JOIN accounts ON users.id = accounts.user_id
WHERE accounts.id = $1 AND users.status != 'deleted'
  AND accounts.status != 'deleted'
`

func (q *Queries) GetUserByAccountId(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAccountId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Gender,
		&i.ExerciseLevel,
		&i.Aim,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT users.id, first_name, last_name, username, age, height, weight, gender, exercise_level, aim, users.status, users.created_at, users.created_by, users.updated_at, users.updated_by, users.deleted_at, users.deleted_by, accounts.id, user_id, email, password, accounts.status, accounts.created_at, accounts.created_by, accounts.updated_at, accounts.updated_by, accounts.deleted_at, accounts.deleted_by
FROM users
JOIN accounts ON users.id = accounts.user_id
WHERE accounts.email = $1 AND users.status != 'deleted'
  AND accounts.status != 'deleted'
`

type GetUserByEmailRow struct {
	ID            uuid.UUID  `json:"id"`
	FirstName     *string    `json:"first_name"`
	LastName      *string    `json:"last_name"`
	Username      *string    `json:"username"`
	Age           *int32     `json:"age"`
	Height        *int32     `json:"height"`
	Weight        *int32     `json:"weight"`
	Gender        *string    `json:"gender"`
	ExerciseLevel *string    `json:"exercise_level"`
	Aim           *string    `json:"aim"`
	Status        string     `json:"status"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *uuid.UUID `json:"created_by"`
	UpdatedAt     time.Time  `json:"updated_at"`
	UpdatedBy     *uuid.UUID `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *uuid.UUID `json:"deleted_by"`
	ID_2          uuid.UUID  `json:"id_2"`
	UserID        uuid.UUID  `json:"user_id"`
	Email         string     `json:"email"`
	Password      string     `json:"password"`
	Status_2      string     `json:"status_2"`
	CreatedAt_2   time.Time  `json:"created_at_2"`
	CreatedBy_2   *uuid.UUID `json:"created_by_2"`
	UpdatedAt_2   time.Time  `json:"updated_at_2"`
	UpdatedBy_2   *uuid.UUID `json:"updated_by_2"`
	DeletedAt_2   *time.Time `json:"deleted_at_2"`
	DeletedBy_2   *uuid.UUID `json:"deleted_by_2"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Gender,
		&i.ExerciseLevel,
		&i.Aim,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.ID_2,
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Status_2,
		&i.CreatedAt_2,
		&i.CreatedBy_2,
		&i.UpdatedAt_2,
		&i.UpdatedBy_2,
		&i.DeletedAt_2,
		&i.DeletedBy_2,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, username, age, height, weight, gender, exercise_level, aim, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM users
WHERE id = $1 AND status != 'deleted'
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Gender,
		&i.ExerciseLevel,
		&i.Aim,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  first_name = $2,
  last_name = $3,
  username = $4,
  age = $5,
  height = $6,
  weight = $7,
  gender = $8,
  exercise_level = $9,
  aim = $10,
  status = $11,
  updated_at = $12,
  updated_by = $13
WHERE id = $1 AND status != 'deleted'
`

type UpdateUserParams struct {
	ID            uuid.UUID  `json:"id"`
	FirstName     *string    `json:"first_name"`
	LastName      *string    `json:"last_name"`
	Username      *string    `json:"username"`
	Age           *int32     `json:"age"`
	Height        *int32     `json:"height"`
	Weight        *int32     `json:"weight"`
	Gender        *string    `json:"gender"`
	ExerciseLevel *string    `json:"exercise_level"`
	Aim           *string    `json:"aim"`
	Status        string     `json:"status"`
	UpdatedAt     time.Time  `json:"updated_at"`
	UpdatedBy     *uuid.UUID `json:"updated_by"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Age,
		arg.Height,
		arg.Weight,
		arg.Gender,
		arg.ExerciseLevel,
		arg.Aim,
		arg.Status,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}
