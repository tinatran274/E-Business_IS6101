// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addCartItem = `-- name: AddCartItem :exec
INSERT INTO cart (
    user_id, 
    product_variant_id,
    quantity
) VALUES ($1, $2, $3)
`

type AddCartItemParams struct {
	UserID           uuid.UUID `json:"user_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
	Quantity         int32     `json:"quantity"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) error {
	_, err := q.db.Exec(ctx, addCartItem, arg.UserID, arg.ProductVariantID, arg.Quantity)
	return err
}

const countCartItemsByUserId = `-- name: CountCartItemsByUserId :one
SELECT COUNT(*) AS count
FROM cart
WHERE user_id = $1
`

func (q *Queries) CountCartItemsByUserId(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCartItemsByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart
WHERE user_id = $1 AND product_variant_id = $2
`

type DeleteCartItemParams struct {
	UserID           uuid.UUID `json:"user_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	_, err := q.db.Exec(ctx, deleteCartItem, arg.UserID, arg.ProductVariantID)
	return err
}

const getCartItemByUserIdAndProductVariantId = `-- name: GetCartItemByUserIdAndProductVariantId :one
SELECT user_id, product_variant_id, quantity
FROM cart
WHERE user_id = $1 AND product_variant_id = $2
`

type GetCartItemByUserIdAndProductVariantIdParams struct {
	UserID           uuid.UUID `json:"user_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
}

func (q *Queries) GetCartItemByUserIdAndProductVariantId(ctx context.Context, arg GetCartItemByUserIdAndProductVariantIdParams) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartItemByUserIdAndProductVariantId, arg.UserID, arg.ProductVariantID)
	var i Cart
	err := row.Scan(&i.UserID, &i.ProductVariantID, &i.Quantity)
	return i, err
}

const getCartItemsByUserId = `-- name: GetCartItemsByUserId :many
SELECT user_id, product_variant_id, quantity
FROM cart
WHERE user_id = $3
LIMIT $1
OFFSET $2
`

type GetCartItemsByUserIdParams struct {
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetCartItemsByUserId(ctx context.Context, arg GetCartItemsByUserIdParams) ([]Cart, error) {
	rows, err := q.db.Query(ctx, getCartItemsByUserId, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(&i.UserID, &i.ProductVariantID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :exec
UPDATE cart
SET 
    quantity = $3
WHERE user_id = $1 AND product_variant_id = $2
`

type UpdateCartItemParams struct {
	UserID           uuid.UUID `json:"user_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
	Quantity         int32     `json:"quantity"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) error {
	_, err := q.db.Exec(ctx, updateCartItem, arg.UserID, arg.ProductVariantID, arg.Quantity)
	return err
}
