// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: statistic.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStatistic = `-- name: CreateStatistic :exec
INSERT INTO statistics (
    updated_at,
    user_id,
    morning_calories,
    lunch_calories,
    dinner_calories,
    snack_calories,
    exercise_calories
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreateStatisticParams struct {
	UpdatedAt        time.Time `json:"updated_at"`
	UserID           uuid.UUID `json:"user_id"`
	MorningCalories  float64   `json:"morning_calories"`
	LunchCalories    float64   `json:"lunch_calories"`
	DinnerCalories   float64   `json:"dinner_calories"`
	SnackCalories    float64   `json:"snack_calories"`
	ExerciseCalories float64   `json:"exercise_calories"`
}

func (q *Queries) CreateStatistic(ctx context.Context, arg CreateStatisticParams) error {
	_, err := q.db.Exec(ctx, createStatistic,
		arg.UpdatedAt,
		arg.UserID,
		arg.MorningCalories,
		arg.LunchCalories,
		arg.DinnerCalories,
		arg.SnackCalories,
		arg.ExerciseCalories,
	)
	return err
}

const getStatisticByUserIdAndDate = `-- name: GetStatisticByUserIdAndDate :one
SELECT updated_at, user_id, morning_calories, lunch_calories, dinner_calories, snack_calories, exercise_calories FROM statistics
WHERE user_id = $1 AND updated_at = $2
`

type GetStatisticByUserIdAndDateParams struct {
	UserID    uuid.UUID `json:"user_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetStatisticByUserIdAndDate(ctx context.Context, arg GetStatisticByUserIdAndDateParams) (Statistic, error) {
	row := q.db.QueryRow(ctx, getStatisticByUserIdAndDate, arg.UserID, arg.UpdatedAt)
	var i Statistic
	err := row.Scan(
		&i.UpdatedAt,
		&i.UserID,
		&i.MorningCalories,
		&i.LunchCalories,
		&i.DinnerCalories,
		&i.SnackCalories,
		&i.ExerciseCalories,
	)
	return i, err
}

const updateStatisticByUserIdAndDate = `-- name: UpdateStatisticByUserIdAndDate :exec
UPDATE statistics
SET
    morning_calories = $3,
    lunch_calories = $4,
    dinner_calories = $5,
    snack_calories = $6,
    exercise_calories = $7
WHERE user_id = $1 AND updated_at = $2
`

type UpdateStatisticByUserIdAndDateParams struct {
	UserID           uuid.UUID `json:"user_id"`
	UpdatedAt        time.Time `json:"updated_at"`
	MorningCalories  float64   `json:"morning_calories"`
	LunchCalories    float64   `json:"lunch_calories"`
	DinnerCalories   float64   `json:"dinner_calories"`
	SnackCalories    float64   `json:"snack_calories"`
	ExerciseCalories float64   `json:"exercise_calories"`
}

func (q *Queries) UpdateStatisticByUserIdAndDate(ctx context.Context, arg UpdateStatisticByUserIdAndDateParams) error {
	_, err := q.db.Exec(ctx, updateStatisticByUserIdAndDate,
		arg.UserID,
		arg.UpdatedAt,
		arg.MorningCalories,
		arg.LunchCalories,
		arg.DinnerCalories,
		arg.SnackCalories,
		arg.ExerciseCalories,
	)
	return err
}
