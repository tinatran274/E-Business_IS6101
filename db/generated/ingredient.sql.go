// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ingredient.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countIngredients = `-- name: CountIngredients :one
SELECT COUNT(*) FROM ingredients
WHERE status != 'deleted'
`

func (q *Queries) CountIngredients(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countIngredients)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createIngredient = `-- name: CreateIngredient :exec
INSERT INTO ingredients (
  id, 
  name,
  description,
  removal,
  kcal,
  protein,
  lipits,
  glucids,
  canxi,
  phosphor,
  fe,
  vitamin_a,
  vitamin_b1,
  vitamin_b2,
  vitamin_c,
  vitamin_pp,
  beta_caroten,
  category_id,
  status,
  created_at,
  created_by,
  updated_at,
  updated_by
  )
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23
)
`

type CreateIngredientParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Removal     float64    `json:"removal"`
	Kcal        float64    `json:"kcal"`
	Protein     float64    `json:"protein"`
	Lipits      float64    `json:"lipits"`
	Glucids     float64    `json:"glucids"`
	Canxi       float64    `json:"canxi"`
	Phosphor    float64    `json:"phosphor"`
	Fe          float64    `json:"fe"`
	VitaminA    float64    `json:"vitamin_a"`
	VitaminB1   float64    `json:"vitamin_b1"`
	VitaminB2   float64    `json:"vitamin_b2"`
	VitaminC    float64    `json:"vitamin_c"`
	VitaminPp   float64    `json:"vitamin_pp"`
	BetaCaroten float64    `json:"beta_caroten"`
	CategoryID  uuid.UUID  `json:"category_id"`
	Status      string     `json:"status"`
	CreatedAt   time.Time  `json:"created_at"`
	CreatedBy   *uuid.UUID `json:"created_by"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) error {
	_, err := q.db.Exec(ctx, createIngredient,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Removal,
		arg.Kcal,
		arg.Protein,
		arg.Lipits,
		arg.Glucids,
		arg.Canxi,
		arg.Phosphor,
		arg.Fe,
		arg.VitaminA,
		arg.VitaminB1,
		arg.VitaminB2,
		arg.VitaminC,
		arg.VitaminPp,
		arg.BetaCaroten,
		arg.CategoryID,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
UPDATE ingredients
SET
  status = 'deleted',
  deleted_at = $2,
  deleted_by = $3
WHERE id = $1 AND status != 'deleted'
`

type DeleteIngredientParams struct {
	ID        uuid.UUID  `json:"id"`
	DeletedAt *time.Time `json:"deleted_at"`
	DeletedBy *uuid.UUID `json:"deleted_by"`
}

func (q *Queries) DeleteIngredient(ctx context.Context, arg DeleteIngredientParams) error {
	_, err := q.db.Exec(ctx, deleteIngredient, arg.ID, arg.DeletedAt, arg.DeletedBy)
	return err
}

const getIngredientByDishId = `-- name: GetIngredientByDishId :many
SELECT i.id, i.name, i.description, i.removal, i.kcal, i.protein, i.lipits, i.glucids, i.canxi, i.phosphor, i.fe, i.vitamin_a, i.vitamin_b1, i.vitamin_b2, i.vitamin_c, i.vitamin_pp, i.beta_caroten, i.category_id, i.status, i.created_at, i.created_by, i.updated_at, i.updated_by, i.deleted_at, i.deleted_by, r.unit
FROM ingredients i
JOIN recipes r ON i.id = r.ingredient_id
WHERE r.dish_id = $1 AND i.status != 'deleted'
`

type GetIngredientByDishIdRow struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Removal     float64    `json:"removal"`
	Kcal        float64    `json:"kcal"`
	Protein     float64    `json:"protein"`
	Lipits      float64    `json:"lipits"`
	Glucids     float64    `json:"glucids"`
	Canxi       float64    `json:"canxi"`
	Phosphor    float64    `json:"phosphor"`
	Fe          float64    `json:"fe"`
	VitaminA    float64    `json:"vitamin_a"`
	VitaminB1   float64    `json:"vitamin_b1"`
	VitaminB2   float64    `json:"vitamin_b2"`
	VitaminC    float64    `json:"vitamin_c"`
	VitaminPp   float64    `json:"vitamin_pp"`
	BetaCaroten float64    `json:"beta_caroten"`
	CategoryID  uuid.UUID  `json:"category_id"`
	Status      string     `json:"status"`
	CreatedAt   time.Time  `json:"created_at"`
	CreatedBy   *uuid.UUID `json:"created_by"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
	DeletedAt   *time.Time `json:"deleted_at"`
	DeletedBy   *uuid.UUID `json:"deleted_by"`
	Unit        float64    `json:"unit"`
}

func (q *Queries) GetIngredientByDishId(ctx context.Context, dishID uuid.UUID) ([]GetIngredientByDishIdRow, error) {
	rows, err := q.db.Query(ctx, getIngredientByDishId, dishID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIngredientByDishIdRow
	for rows.Next() {
		var i GetIngredientByDishIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Removal,
			&i.Kcal,
			&i.Protein,
			&i.Lipits,
			&i.Glucids,
			&i.Canxi,
			&i.Phosphor,
			&i.Fe,
			&i.VitaminA,
			&i.VitaminB1,
			&i.VitaminB2,
			&i.VitaminC,
			&i.VitaminPp,
			&i.BetaCaroten,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
			&i.Unit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredientById = `-- name: GetIngredientById :one
SELECT id, name, description, removal, kcal, protein, lipits, glucids, canxi, phosphor, fe, vitamin_a, vitamin_b1, vitamin_b2, vitamin_c, vitamin_pp, beta_caroten, category_id, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM ingredients
WHERE id = $1 AND status != 'deleted'
`

func (q *Queries) GetIngredientById(ctx context.Context, id uuid.UUID) (Ingredient, error) {
	row := q.db.QueryRow(ctx, getIngredientById, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Removal,
		&i.Kcal,
		&i.Protein,
		&i.Lipits,
		&i.Glucids,
		&i.Canxi,
		&i.Phosphor,
		&i.Fe,
		&i.VitaminA,
		&i.VitaminB1,
		&i.VitaminB2,
		&i.VitaminC,
		&i.VitaminPp,
		&i.BetaCaroten,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getIngredients = `-- name: GetIngredients :many
SELECT l.id, l.name, l.description, l.removal, l.kcal, l.protein, l.lipits, l.glucids, l.canxi, l.phosphor, l.fe, l.vitamin_a, l.vitamin_b1, l.vitamin_b2, l.vitamin_c, l.vitamin_pp, l.beta_caroten, l.category_id, l.status, l.created_at, l.created_by, l.updated_at, l.updated_by, l.deleted_at, l.deleted_by
FROM ingredients l
WHERE ($3::text = '' or l.name ilike concat('%',$3::text,'%'))
ORDER BY
    CASE 
        WHEN $4::text = 'created_at' THEN 
            CASE 
                WHEN $5::text = 'asc' THEN l.created_at 
            END 
    END ASC,
    CASE 
        WHEN $4::text = 'created_at' THEN 
            CASE 
                WHEN $5::text = 'desc' THEN l.created_at 
            END 
    END DESC
LIMIT $1
OFFSET $2
`

type GetIngredientsParams struct {
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
	Keyword string `json:"keyword"`
	SortBy  string `json:"sort_by"`
	OrderBy string `json:"order_by"`
}

func (q *Queries) GetIngredients(ctx context.Context, arg GetIngredientsParams) ([]Ingredient, error) {
	rows, err := q.db.Query(ctx, getIngredients,
		arg.Limit,
		arg.Offset,
		arg.Keyword,
		arg.SortBy,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Removal,
			&i.Kcal,
			&i.Protein,
			&i.Lipits,
			&i.Glucids,
			&i.Canxi,
			&i.Phosphor,
			&i.Fe,
			&i.VitaminA,
			&i.VitaminB1,
			&i.VitaminB2,
			&i.VitaminC,
			&i.VitaminPp,
			&i.BetaCaroten,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :exec
UPDATE ingredients
SET
  name = $2,
  description = $3,
  removal = $4,
  kcal = $5,
  protein = $6,
  lipits = $7,
  glucids = $8,
  canxi = $9, 
  phosphor = $10,
  fe = $11,
  vitamin_a = $12,
  vitamin_b1 = $13,
  vitamin_b2 = $14,
  vitamin_c = $15,
  vitamin_pp = $16,
  beta_caroten = $17,
  category_id = $18,
  status = $19,
  updated_at = $20,
  updated_by = $21
WHERE id = $1 AND status != 'deleted'
`

type UpdateIngredientParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Removal     float64    `json:"removal"`
	Kcal        float64    `json:"kcal"`
	Protein     float64    `json:"protein"`
	Lipits      float64    `json:"lipits"`
	Glucids     float64    `json:"glucids"`
	Canxi       float64    `json:"canxi"`
	Phosphor    float64    `json:"phosphor"`
	Fe          float64    `json:"fe"`
	VitaminA    float64    `json:"vitamin_a"`
	VitaminB1   float64    `json:"vitamin_b1"`
	VitaminB2   float64    `json:"vitamin_b2"`
	VitaminC    float64    `json:"vitamin_c"`
	VitaminPp   float64    `json:"vitamin_pp"`
	BetaCaroten float64    `json:"beta_caroten"`
	CategoryID  uuid.UUID  `json:"category_id"`
	Status      string     `json:"status"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) error {
	_, err := q.db.Exec(ctx, updateIngredient,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Removal,
		arg.Kcal,
		arg.Protein,
		arg.Lipits,
		arg.Glucids,
		arg.Canxi,
		arg.Phosphor,
		arg.Fe,
		arg.VitaminA,
		arg.VitaminB1,
		arg.VitaminB2,
		arg.VitaminC,
		arg.VitaminPp,
		arg.BetaCaroten,
		arg.CategoryID,
		arg.Status,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}
