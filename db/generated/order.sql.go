// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countOrdersByUserId = `-- name: CountOrdersByUserId :one
SELECT COUNT(*) AS count
FROM orders l
WHERE created_by = $1 AND
    (
        ($2::text = '' AND l.status != 'deleted') OR 
        (l.status = $2::text)
    )
`

type CountOrdersByUserIdParams struct {
	CreatedBy *uuid.UUID `json:"created_by"`
	Status    string     `json:"status"`
}

func (q *Queries) CountOrdersByUserId(ctx context.Context, arg CountOrdersByUserIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, countOrdersByUserId, arg.CreatedBy, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (
    id,
    user_id,
    order_date,
    receiver_name,
    receiver_phone,
    receiver_address,
    shipping_cost,
    payment_method_id,
    payment_status,
    shipping_status,
    order_status,
    created_at,
    created_by,
    updated_at,
    updated_by
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
`

type CreateOrderParams struct {
	ID              uuid.UUID  `json:"id"`
	UserID          uuid.UUID  `json:"user_id"`
	OrderDate       time.Time  `json:"order_date"`
	ReceiverName    string     `json:"receiver_name"`
	ReceiverPhone   string     `json:"receiver_phone"`
	ReceiverAddress string     `json:"receiver_address"`
	ShippingCost    float64    `json:"shipping_cost"`
	PaymentMethodID uuid.UUID  `json:"payment_method_id"`
	PaymentStatus   string     `json:"payment_status"`
	ShippingStatus  string     `json:"shipping_status"`
	OrderStatus     string     `json:"order_status"`
	CreatedAt       time.Time  `json:"created_at"`
	CreatedBy       *uuid.UUID `json:"created_by"`
	UpdatedAt       time.Time  `json:"updated_at"`
	UpdatedBy       *uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.Exec(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.OrderDate,
		arg.ReceiverName,
		arg.ReceiverPhone,
		arg.ReceiverAddress,
		arg.ShippingCost,
		arg.PaymentMethodID,
		arg.PaymentStatus,
		arg.ShippingStatus,
		arg.OrderStatus,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
UPDATE orders
SET
    order_status = 'deleted',
    deleted_at = $2,
    deleted_by = $3
WHERE id = $1
`

type DeleteOrderParams struct {
	ID        uuid.UUID  `json:"id"`
	DeletedAt *time.Time `json:"deleted_at"`
	DeletedBy *uuid.UUID `json:"deleted_by"`
}

func (q *Queries) DeleteOrder(ctx context.Context, arg DeleteOrderParams) error {
	_, err := q.db.Exec(ctx, deleteOrder, arg.ID, arg.DeletedAt, arg.DeletedBy)
	return err
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, user_id, order_date, receiver_name, receiver_phone, receiver_address, shipping_cost, payment_method_id, payment_status, shipping_status, order_status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM orders
WHERE id = $1 AND order_status != 'deleted'
`

func (q *Queries) GetOrderById(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderDate,
		&i.ReceiverName,
		&i.ReceiverPhone,
		&i.ReceiverAddress,
		&i.ShippingCost,
		&i.PaymentMethodID,
		&i.PaymentStatus,
		&i.ShippingStatus,
		&i.OrderStatus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getOrdersByUserId = `-- name: GetOrdersByUserId :many
SELECT l.id, l.user_id, l.order_date, l.receiver_name, l.receiver_phone, l.receiver_address, l.shipping_cost, l.payment_method_id, l.payment_status, l.shipping_status, l.order_status, l.created_at, l.created_by, l.updated_at, l.updated_by, l.deleted_at, l.deleted_by
FROM orders l
WHERE created_by = $3 AND
    (
        ($4::text = '' AND l.status != 'deleted') OR 
        (l.status = $4::text)
    )
ORDER BY
    CASE 
        WHEN $5::text = 'created_at' THEN 
            CASE 
                WHEN $6::text = 'asc' THEN l.created_at 
            END 
    END ASC,
    CASE 
        WHEN $5::text = 'created_at' THEN 
            CASE 
                WHEN $6::text = 'desc' THEN l.created_at 
            END 
    END DESC
LIMIT $1
OFFSET $2
`

type GetOrdersByUserIdParams struct {
	Limit     int32      `json:"limit"`
	Offset    int32      `json:"offset"`
	CreatedBy *uuid.UUID `json:"created_by"`
	Status    string     `json:"status"`
	SortBy    string     `json:"sort_by"`
	OrderBy   string     `json:"order_by"`
}

func (q *Queries) GetOrdersByUserId(ctx context.Context, arg GetOrdersByUserIdParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserId,
		arg.Limit,
		arg.Offset,
		arg.CreatedBy,
		arg.Status,
		arg.SortBy,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderDate,
			&i.ReceiverName,
			&i.ReceiverPhone,
			&i.ReceiverAddress,
			&i.ShippingCost,
			&i.PaymentMethodID,
			&i.PaymentStatus,
			&i.ShippingStatus,
			&i.OrderStatus,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET
    user_id = $2,
    order_date = $3,
    receiver_name = $4,
    receiver_phone = $5,
    receiver_address = $6,
    shipping_cost = $7,
    payment_method_id = $8,
    payment_status = $9,
    shipping_status = $10,
    order_status = $11,
    updated_at = $12,
    updated_by = $13
WHERE id = $1
`

type UpdateOrderParams struct {
	ID              uuid.UUID  `json:"id"`
	UserID          uuid.UUID  `json:"user_id"`
	OrderDate       time.Time  `json:"order_date"`
	ReceiverName    string     `json:"receiver_name"`
	ReceiverPhone   string     `json:"receiver_phone"`
	ReceiverAddress string     `json:"receiver_address"`
	ShippingCost    float64    `json:"shipping_cost"`
	PaymentMethodID uuid.UUID  `json:"payment_method_id"`
	PaymentStatus   string     `json:"payment_status"`
	ShippingStatus  string     `json:"shipping_status"`
	OrderStatus     string     `json:"order_status"`
	UpdatedAt       time.Time  `json:"updated_at"`
	UpdatedBy       *uuid.UUID `json:"updated_by"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.ID,
		arg.UserID,
		arg.OrderDate,
		arg.ReceiverName,
		arg.ReceiverPhone,
		arg.ReceiverAddress,
		arg.ShippingCost,
		arg.PaymentMethodID,
		arg.PaymentStatus,
		arg.ShippingStatus,
		arg.OrderStatus,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}
