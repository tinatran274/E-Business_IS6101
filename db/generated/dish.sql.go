// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dish.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countDishes = `-- name: CountDishes :one
SELECT COUNT(*) FROM dishes
WHERE status != 'deleted'
`

func (q *Queries) CountDishes(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countDishes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDish = `-- name: CreateDish :exec
INSERT INTO dishes (
  id, 
  name,
  description,
  category_id,
  status,
  created_at,
  created_by,
  updated_at,
  updated_by
  )
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type CreateDishParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	CategoryID  uuid.UUID  `json:"category_id"`
	Status      string     `json:"status"`
	CreatedAt   time.Time  `json:"created_at"`
	CreatedBy   *uuid.UUID `json:"created_by"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateDish(ctx context.Context, arg CreateDishParams) error {
	_, err := q.db.Exec(ctx, createDish,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteDish = `-- name: DeleteDish :exec
UPDATE dishes
SET
  status = 'deleted',
  deleted_at = $2,
  deleted_by = $3
WHERE id = $1 AND status != 'deleted'
`

type DeleteDishParams struct {
	ID        uuid.UUID  `json:"id"`
	DeletedAt *time.Time `json:"deleted_at"`
	DeletedBy *uuid.UUID `json:"deleted_by"`
}

func (q *Queries) DeleteDish(ctx context.Context, arg DeleteDishParams) error {
	_, err := q.db.Exec(ctx, deleteDish, arg.ID, arg.DeletedAt, arg.DeletedBy)
	return err
}

const getDishById = `-- name: GetDishById :one
SELECT id, name, description, category_id, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM dishes
WHERE id = $1 AND status != 'deleted'
`

func (q *Queries) GetDishById(ctx context.Context, id uuid.UUID) (Dish, error) {
	row := q.db.QueryRow(ctx, getDishById, id)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getDishByIngredientId = `-- name: GetDishByIngredientId :many
SELECT d.id, d.name, d.description, d.category_id, d.status, d.created_at, d.created_by, d.updated_at, d.updated_by, d.deleted_at, d.deleted_by
FROM dishes d
JOIN recipes r ON d.id = r.dish_id
WHERE r.ingredient_id = $1 AND d.status != 'deleted'
`

func (q *Queries) GetDishByIngredientId(ctx context.Context, ingredientID uuid.UUID) ([]Dish, error) {
	rows, err := q.db.Query(ctx, getDishByIngredientId, ingredientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dish
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDishes = `-- name: GetDishes :many
SELECT l.id, l.name, l.description, l.category_id, l.status, l.created_at, l.created_by, l.updated_at, l.updated_by, l.deleted_at, l.deleted_by
FROM dishes l
WHERE ($3::text = '' or l.name ilike concat('%',$3::text,'%'))
ORDER BY
    CASE 
        WHEN $4::text = 'created_at' THEN 
            CASE 
                WHEN $5::text = 'asc' THEN l.created_at 
            END 
    END ASC,
    CASE 
        WHEN $4::text = 'created_at' THEN 
            CASE 
                WHEN $5::text = 'desc' THEN l.created_at 
            END 
    END DESC
LIMIT $1
OFFSET $2
`

type GetDishesParams struct {
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
	Keyword string `json:"keyword"`
	SortBy  string `json:"sort_by"`
	OrderBy string `json:"order_by"`
}

func (q *Queries) GetDishes(ctx context.Context, arg GetDishesParams) ([]Dish, error) {
	rows, err := q.db.Query(ctx, getDishes,
		arg.Limit,
		arg.Offset,
		arg.Keyword,
		arg.SortBy,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dish
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDish = `-- name: UpdateDish :exec
UPDATE dishes
SET
  name = $2,
  description = $3,
  category_id = $4,
  status = $5,
  updated_at = $6,
  updated_by = $7
WHERE id = $1 AND status != 'deleted'
`

type UpdateDishParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	CategoryID  uuid.UUID  `json:"category_id"`
	Status      string     `json:"status"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
}

func (q *Queries) UpdateDish(ctx context.Context, arg UpdateDishParams) error {
	_, err := q.db.Exec(ctx, updateDish,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.Status,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}
