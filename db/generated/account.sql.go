// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (
  id,
  user_id,
  email,
  password,
  status,
  created_at,
  created_by,
  updated_at,
  updated_by
)
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type CreateAccountParams struct {
	ID        uuid.UUID  `json:"id"`
	UserID    uuid.UUID  `json:"user_id"`
	Email     string     `json:"email"`
	Password  string     `json:"password"`
	Status    string     `json:"status"`
	CreatedAt time.Time  `json:"created_at"`
	CreatedBy *uuid.UUID `json:"created_by"`
	UpdatedAt time.Time  `json:"updated_at"`
	UpdatedBy *uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount,
		arg.ID,
		arg.UserID,
		arg.Email,
		arg.Password,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts
SET
  status = 'deleted',
  deleted_at = NOW(),
  deleted_by = $2
WHERE id = $1 AND status != 'deleted'
`

type DeleteAccountParams struct {
	ID        uuid.UUID  `json:"id"`
	DeletedBy *uuid.UUID `json:"deleted_by"`
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.Exec(ctx, deleteAccount, arg.ID, arg.DeletedBy)
	return err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, user_id, email, password, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM accounts
WHERE email = $1 AND status != 'deleted'
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, user_id, email, password, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM accounts
WHERE id = $1 AND status != 'deleted'
`

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
SET
  user_id = $2,
  email = $3,
  password = $4,
  status = $5,
  updated_at = $6,
  updated_by = $7
WHERE id = $1 AND status != 'deleted'
`

type UpdateAccountParams struct {
	ID        uuid.UUID  `json:"id"`
	UserID    uuid.UUID  `json:"user_id"`
	Email     string     `json:"email"`
	Password  string     `json:"password"`
	Status    string     `json:"status"`
	UpdatedAt time.Time  `json:"updated_at"`
	UpdatedBy *uuid.UUID `json:"updated_by"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount,
		arg.ID,
		arg.UserID,
		arg.Email,
		arg.Password,
		arg.Status,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}
