// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countMyProducts = `-- name: CountMyProducts :one
SELECT COUNT(*)::int
FROM products l
WHERE created_by = $1 AND
    (
        ($2::text = '' AND l.status != 'deleted') OR 
        (l.status = $2::text)
    )
    AND 
    (
        ($3::text = '' OR l.category_id = $3::uuid)
    )
    AND ($4::text = '' OR l.name ilike concat('%',$4::text,'%'))
`

type CountMyProductsParams struct {
	CreatedBy  *uuid.UUID `json:"created_by"`
	Status     string     `json:"status"`
	CategoryID string     `json:"category_id"`
	Keyword    string     `json:"keyword"`
}

func (q *Queries) CountMyProducts(ctx context.Context, arg CountMyProductsParams) (int32, error) {
	row := q.db.QueryRow(ctx, countMyProducts,
		arg.CreatedBy,
		arg.Status,
		arg.CategoryID,
		arg.Keyword,
	)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*)::int
FROM products l
WHERE   
    (
        ($1::text = '' AND l.status != 'deleted') OR 
        (l.status = $1::text)
    )
    AND 
    (
        ($2::text = '' OR l.category_id = $2::uuid)
    )
    AND ($3::text = '' OR l.name ilike concat('%',$3::text,'%'))
`

type CountProductsParams struct {
	Status     string `json:"status"`
	CategoryID string `json:"category_id"`
	Keyword    string `json:"keyword"`
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int32, error) {
	row := q.db.QueryRow(ctx, countProducts, arg.Status, arg.CategoryID, arg.Keyword)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countProductsByCategoryId = `-- name: CountProductsByCategoryId :one
SELECT COUNT(*)::int
FROM products l
WHERE l.category_id = $1 AND l.status != 'deleted' AND 
    ($2::text = '' or l.name ilike concat('%',$2::text,'%'))
`

type CountProductsByCategoryIdParams struct {
	CategoryID uuid.UUID `json:"category_id"`
	Keyword    string    `json:"keyword"`
}

func (q *Queries) CountProductsByCategoryId(ctx context.Context, arg CountProductsByCategoryIdParams) (int32, error) {
	row := q.db.QueryRow(ctx, countProductsByCategoryId, arg.CategoryID, arg.Keyword)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
  id, 
  name,
  description,
  brand,
  origin,
  user_guide,
  category_id,
  status,
  created_at,
  created_by,
  updated_at,
  updated_by
  )
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
`

type CreateProductParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Brand       *string    `json:"brand"`
	Origin      *string    `json:"origin"`
	UserGuide   *string    `json:"user_guide"`
	CategoryID  uuid.UUID  `json:"category_id"`
	Status      string     `json:"status"`
	CreatedAt   time.Time  `json:"created_at"`
	CreatedBy   *uuid.UUID `json:"created_by"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Brand,
		arg.Origin,
		arg.UserGuide,
		arg.CategoryID,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET
  status = 'deleted',
  deleted_at = $2,
  deleted_by = $3
WHERE id = $1 AND status != 'deleted'
`

type DeleteProductParams struct {
	ID        uuid.UUID  `json:"id"`
	DeletedAt *time.Time `json:"deleted_at"`
	DeletedBy *uuid.UUID `json:"deleted_by"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.Exec(ctx, deleteProduct, arg.ID, arg.DeletedAt, arg.DeletedBy)
	return err
}

const getMyProducts = `-- name: GetMyProducts :many
SELECT l.id, l.name, l.description, l.brand, l.origin, l.user_guide, l.category_id, l.status, l.created_at, l.created_by, l.updated_at, l.updated_by, l.deleted_at, l.deleted_by
FROM products l
WHERE created_by = $3 AND
    (
        ($4::text = '' AND l.status != 'deleted') OR 
        (l.status = $4::text)
    )
    AND 
    (
        ($5::text = '' OR l.category_id = $5::uuid)
    )
    AND ($6::text = '' OR l.name ilike concat('%',$6::text,'%'))
ORDER BY
    CASE 
        WHEN $7::text = 'created_at' THEN 
            CASE 
                WHEN $8::text = 'asc' THEN l.created_at 
            END 
    END ASC,
    CASE 
        WHEN $7::text = 'created_at' THEN 
            CASE 
                WHEN $8::text = 'desc' THEN l.created_at 
            END 
    END DESC
LIMIT $1
OFFSET $2
`

type GetMyProductsParams struct {
	Limit      int32      `json:"limit"`
	Offset     int32      `json:"offset"`
	CreatedBy  *uuid.UUID `json:"created_by"`
	Status     string     `json:"status"`
	CategoryID string     `json:"category_id"`
	Keyword    string     `json:"keyword"`
	SortBy     string     `json:"sort_by"`
	OrderBy    string     `json:"order_by"`
}

func (q *Queries) GetMyProducts(ctx context.Context, arg GetMyProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getMyProducts,
		arg.Limit,
		arg.Offset,
		arg.CreatedBy,
		arg.Status,
		arg.CategoryID,
		arg.Keyword,
		arg.SortBy,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Brand,
			&i.Origin,
			&i.UserGuide,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, description, brand, origin, user_guide, category_id, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM products
WHERE id = $1 AND status != 'deleted'
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Brand,
		&i.Origin,
		&i.UserGuide,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT l.id, l.name, l.description, l.brand, l.origin, l.user_guide, l.category_id, l.status, l.created_at, l.created_by, l.updated_at, l.updated_by, l.deleted_at, l.deleted_by
FROM products l
WHERE   
    (
        ($3::text = '' AND l.status != 'deleted') OR 
        (l.status = $3::text)
    )
    AND 
    (
        ($4::text = '' OR l.category_id = $4::uuid)
    )
    AND ($5::text = '' OR l.name ilike concat('%',$5::text,'%'))
ORDER BY
    CASE 
        WHEN $6::text = 'created_at' THEN 
            CASE 
                WHEN $7::text = 'asc' THEN l.created_at 
            END 
    END ASC,
    CASE 
        WHEN $6::text = 'created_at' THEN 
            CASE 
                WHEN $7::text = 'desc' THEN l.created_at 
            END 
    END DESC
LIMIT $1
OFFSET $2
`

type GetProductsParams struct {
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
	Status     string `json:"status"`
	CategoryID string `json:"category_id"`
	Keyword    string `json:"keyword"`
	SortBy     string `json:"sort_by"`
	OrderBy    string `json:"order_by"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts,
		arg.Limit,
		arg.Offset,
		arg.Status,
		arg.CategoryID,
		arg.Keyword,
		arg.SortBy,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Brand,
			&i.Origin,
			&i.UserGuide,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByCategoryId = `-- name: GetProductsByCategoryId :many
SELECT l.id, l.name, l.description, l.brand, l.origin, l.user_guide, l.category_id, l.status, l.created_at, l.created_by, l.updated_at, l.updated_by, l.deleted_at, l.deleted_by
FROM products l
WHERE l.category_id = $3

 AND l.status != 'deleted' AND
    ($4::text = '' or l.name ilike concat('%',$4::text,'%'))
ORDER BY
    CASE 
        WHEN $5::text = 'created_at' THEN 
            CASE 
                WHEN $6::text = 'asc' THEN l.created_at 
            END 
    END ASC,
    CASE 
        WHEN $5::text = 'created_at' THEN 
            CASE 
                WHEN $6::text = 'desc' THEN l.created_at 
            END 
    END DESC
LIMIT $1
OFFSET $2
`

type GetProductsByCategoryIdParams struct {
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
	CategoryID uuid.UUID `json:"category_id"`
	Keyword    string    `json:"keyword"`
	SortBy     string    `json:"sort_by"`
	OrderBy    string    `json:"order_by"`
}

func (q *Queries) GetProductsByCategoryId(ctx context.Context, arg GetProductsByCategoryIdParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategoryId,
		arg.Limit,
		arg.Offset,
		arg.CategoryID,
		arg.Keyword,
		arg.SortBy,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Brand,
			&i.Origin,
			&i.UserGuide,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET
  name = $2,
  description = $3,
  brand = $4,
  origin = $5,
  user_guide = $6,
  category_id = $7,
  status = $8,
  updated_at = $9,
  updated_by = $10
WHERE id = $1 AND status != 'deleted'
`

type UpdateProductParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Brand       *string    `json:"brand"`
	Origin      *string    `json:"origin"`
	UserGuide   *string    `json:"user_guide"`
	CategoryID  uuid.UUID  `json:"category_id"`
	Status      string     `json:"status"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Brand,
		arg.Origin,
		arg.UserGuide,
		arg.CategoryID,
		arg.Status,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}
