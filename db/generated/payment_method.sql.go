// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment_method.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countPaymentMethods = `-- name: CountPaymentMethods :one
SELECT COUNT(*) AS count
FROM payment_methods
WHERE status != 'deleted'
`

func (q *Queries) CountPaymentMethods(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPaymentMethods)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPaymentMethodById = `-- name: GetPaymentMethodById :one
SELECT id, name, description, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM payment_methods
WHERE id = $1 AND status != 'deleted'
`

func (q *Queries) GetPaymentMethodById(ctx context.Context, id uuid.UUID) (PaymentMethod, error) {
	row := q.db.QueryRow(ctx, getPaymentMethodById, id)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPaymentMethods = `-- name: GetPaymentMethods :many
SELECT id, name, description, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM payment_methods
WHERE status != 'deleted'
ORDER BY
    CASE 
        WHEN $3::text = 'created_at' THEN 
            CASE 
                WHEN $4::text = 'asc' THEN l.created_at 
            END 
    END ASC,
    CASE 
        WHEN $3::text = 'created_at' THEN 
            CASE 
                WHEN $4::text = 'desc' THEN l.created_at 
            END 
    END DESC
LIMIT $1
OFFSET $2
`

type GetPaymentMethodsParams struct {
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
	SortBy  string `json:"sort_by"`
	OrderBy string `json:"order_by"`
}

func (q *Queries) GetPaymentMethods(ctx context.Context, arg GetPaymentMethodsParams) ([]PaymentMethod, error) {
	rows, err := q.db.Query(ctx, getPaymentMethods,
		arg.Limit,
		arg.Offset,
		arg.SortBy,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentMethod
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
