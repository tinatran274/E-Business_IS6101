// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: file.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :exec
INSERT INTO files (
  id, 
  belong_to_id,
  file_path,
  file_type,
  status,
  created_at,
  created_by,
  updated_at,
  updated_by
  )
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type CreateFileParams struct {
	ID         uuid.UUID  `json:"id"`
	BelongToID uuid.UUID  `json:"belong_to_id"`
	FilePath   string     `json:"file_path"`
	FileType   string     `json:"file_type"`
	Status     string     `json:"status"`
	CreatedAt  time.Time  `json:"created_at"`
	CreatedBy  *uuid.UUID `json:"created_by"`
	UpdatedAt  time.Time  `json:"updated_at"`
	UpdatedBy  *uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) error {
	_, err := q.db.Exec(ctx, createFile,
		arg.ID,
		arg.BelongToID,
		arg.FilePath,
		arg.FileType,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteFile = `-- name: DeleteFile :exec
UPDATE files
SET
  status = 'deleted',
  deleted_at = $2,
  deleted_by = $3
WHERE id = $1 AND status != 'deleted'
`

type DeleteFileParams struct {
	ID        uuid.UUID  `json:"id"`
	DeletedAt *time.Time `json:"deleted_at"`
	DeletedBy *uuid.UUID `json:"deleted_by"`
}

func (q *Queries) DeleteFile(ctx context.Context, arg DeleteFileParams) error {
	_, err := q.db.Exec(ctx, deleteFile, arg.ID, arg.DeletedAt, arg.DeletedBy)
	return err
}

const getFileById = `-- name: GetFileById :one
SELECT id, belong_to_id, file_path, file_type, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM files
WHERE id = $1 AND status != 'deleted'
`

func (q *Queries) GetFileById(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRow(ctx, getFileById, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.BelongToID,
		&i.FilePath,
		&i.FileType,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getFilesByBelongToId = `-- name: GetFilesByBelongToId :many
SELECT l.id, l.belong_to_id, l.file_path, l.file_type, l.status, l.created_at, l.created_by, l.updated_at, l.updated_by, l.deleted_at, l.deleted_by
FROM files l
WHERE l.belong_to_id = $1 AND l.status != 'deleted'
`

func (q *Queries) GetFilesByBelongToId(ctx context.Context, belongToID uuid.UUID) ([]File, error) {
	rows, err := q.db.Query(ctx, getFilesByBelongToId, belongToID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.BelongToID,
			&i.FilePath,
			&i.FileType,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :exec
UPDATE files
SET
  belong_to_id = $2,
  file_path = $3,
  file_type = $4,
  status = $5,
  updated_at = $6,
  updated_by = $7
WHERE id = $1 AND status != 'deleted'
`

type UpdateFileParams struct {
	ID         uuid.UUID  `json:"id"`
	BelongToID uuid.UUID  `json:"belong_to_id"`
	FilePath   string     `json:"file_path"`
	FileType   string     `json:"file_type"`
	Status     string     `json:"status"`
	UpdatedAt  time.Time  `json:"updated_at"`
	UpdatedBy  *uuid.UUID `json:"updated_by"`
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) error {
	_, err := q.db.Exec(ctx, updateFile,
		arg.ID,
		arg.BelongToID,
		arg.FilePath,
		arg.FileType,
		arg.Status,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}
