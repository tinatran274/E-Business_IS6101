// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_category.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProductCategory = `-- name: CreateProductCategory :exec
INSERT INTO product_categories (
  id, 
  name,
  description,
  status,
  created_at,
  created_by,
  updated_at,
  updated_by
  )
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
`

type CreateProductCategoryParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Status      string     `json:"status"`
	CreatedAt   time.Time  `json:"created_at"`
	CreatedBy   *uuid.UUID `json:"created_by"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) error {
	_, err := q.db.Exec(ctx, createProductCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
UPDATE product_categories
SET
  status = 'deleted',
  deleted_at = $2,
  deleted_by = $3
WHERE id = $1 AND status != 'deleted'
`

type DeleteProductCategoryParams struct {
	ID        uuid.UUID  `json:"id"`
	DeletedAt *time.Time `json:"deleted_at"`
	DeletedBy *uuid.UUID `json:"deleted_by"`
}

func (q *Queries) DeleteProductCategory(ctx context.Context, arg DeleteProductCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteProductCategory, arg.ID, arg.DeletedAt, arg.DeletedBy)
	return err
}

const getProductCategories = `-- name: GetProductCategories :many
SELECT id, name, description, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM product_categories 
WHERE status != 'deleted'
`

func (q *Queries) GetProductCategories(ctx context.Context) ([]ProductCategory, error) {
	rows, err := q.db.Query(ctx, getProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductCategory
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCategoryById = `-- name: GetProductCategoryById :one
SELECT id, name, description, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by   
FROM product_categories
WHERE id = $1 AND status != 'deleted'
`

func (q *Queries) GetProductCategoryById(ctx context.Context, id uuid.UUID) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, getProductCategoryById, id)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const updateProductCategory = `-- name: UpdateProductCategory :exec
UPDATE product_categories
SET
  name = $2,
  description = $3,
  status = $4,
  updated_at = $5,
  updated_by = $6
WHERE id = $1 AND status != 'deleted'
`

type UpdateProductCategoryParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Status      string     `json:"status"`
	UpdatedAt   time.Time  `json:"updated_at"`
	UpdatedBy   *uuid.UUID `json:"updated_by"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) error {
	_, err := q.db.Exec(ctx, updateProductCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}
