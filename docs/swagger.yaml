basePath: /api/v1
definitions:
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.UpdateStatisticRequest:
    properties:
      dinner_calories:
        type: number
      exercise_calories:
        type: number
      lunch_calories:
        type: number
      morning_calories:
        type: number
      snack_calories:
        type: number
    type: object
  models.UpdateUserRequest:
    properties:
      age:
        type: integer
      aim:
        type: string
      exercise_level:
        type: string
      first_name:
        type: string
      gender:
        type: string
      height:
        type: integer
      last_name:
        type: string
      username:
        type: string
      weight:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: integer
      aim:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      exercise_level:
        type: string
      first_name:
        type: string
      gender:
        type: string
      height:
        type: integer
      id:
        type: string
      last_name:
        type: string
      status:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      username:
        type: string
      weight:
        type: integer
    type: object
  response.GeneralResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: AIOZ ADS SERVICE API DOCUMENTATION
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: AIOZ ADS SERVICE
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: sign in user
      parameters:
      - description: input
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      summary: Sign in
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: sign up new user
      parameters:
      - description: input
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      summary: Sign up
      tags:
      - auth
  /dish:
    get:
      consumes:
      - application/json
      description: Retrieve a list of dishes with filtering and sorting
      parameters:
      - description: Limit (1-100), default is 25
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Search keyword for name
        in: query
        name: keyword
        type: string
      - description: 'Sort direction: asc or desc'
        in: query
        name: sort_by
        type: string
      - description: 'Field to sort by, allowed: updated_at'
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Get dishes
      tags:
      - dish
  /dish/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an dish by its ID
      parameters:
      - description: Dish ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Get dish by ID
      tags:
      - dish
  /dish/{id}/ingredient:
    get:
      consumes:
      - application/json
      description: Retrieve a list of dishes by ingredient ID
      parameters:
      - description: Limit (1-100), default is 25
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: 'Sort direction: asc or desc, default is asc'
        in: query
        name: sort_by
        type: string
      - description: 'Field to sort by, allowed: updated_at, default is updated_at'
        in: query
        name: order_by
        type: string
      - description: Ingredient ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: GetDishByIngredientID
      tags:
      - dish
  /dish/{id}/like:
    post:
      consumes:
      - application/json
      description: Like an dish
      parameters:
      - description: Dish ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Like dish
      tags:
      - dish
  /dish/{id}/unlike:
    post:
      consumes:
      - application/json
      description: Unlike an dish
      parameters:
      - description: Dish ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Unlike dish
      tags:
      - dish
  /ingredient:
    get:
      consumes:
      - application/json
      description: Retrieve a list of ingredients with filtering and sorting
      parameters:
      - description: Limit (1-100), default is 25
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Search keyword for name
        in: query
        name: keyword
        type: string
      - description: 'Sort direction: asc or desc'
        in: query
        name: sort_by
        type: string
      - description: 'Field to sort by, allowed: updated_at'
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Get ingredients
      tags:
      - ingredient
  /ingredient/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an ingredient by its ID
      parameters:
      - description: Ingredient ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Get ingredient by ID
      tags:
      - ingredient
  /statistic/{user_id}:
    get:
      consumes:
      - application/json
      description: get statistic by user id and date
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Updated At
        format: date-time
        in: query
        name: updated_at
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Get statistic by user id and date
      tags:
      - statistic
    put:
      consumes:
      - application/json
      description: update statistic by user id and date
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Statistic
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateStatisticRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Update statistic by user id and date
      tags:
      - statistic
  /user:
    get:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: get all user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Get all
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Get user by ID
      tags:
      - user
    put:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Update a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Update user
      tags:
      - user
  /user/me:
    get:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: get current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.GeneralResponse'
      security:
      - BasicAuth: []
      - Bearer: []
      summary: Get me
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
